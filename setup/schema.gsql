DROP ALL
# ======== Original LDBC SNB v2 ==================
CREATE VERTEX Comment (PRIMARY_ID id UINT, creationDate DATETIME, locationIP STRING, browserUsed STRING, content STRING, length UINT) WITH primary_id_as_attribute="TRUE", STATS="outdegree_by_edgetype"
CREATE VERTEX Post (PRIMARY_ID id UINT, imageFile STRING, creationDate DATETIME, locationIP STRING, browserUsed STRING, lang STRING, content STRING, length UINT) WITH primary_id_as_attribute="TRUE"
CREATE VERTEX Company (PRIMARY_ID id UINT, name STRING, url STRING) WITH primary_id_as_attribute="TRUE"
CREATE VERTEX University (PRIMARY_ID id UINT, name STRING, url STRING) WITH primary_id_as_attribute="TRUE"
CREATE VERTEX City (PRIMARY_ID id UINT, name STRING, url STRING) WITH primary_id_as_attribute="TRUE"
CREATE VERTEX Country (PRIMARY_ID id UINT, name STRING, url STRING) WITH primary_id_as_attribute="TRUE"
CREATE VERTEX Continent (PRIMARY_ID id UINT, name STRING, url STRING) WITH primary_id_as_attribute="TRUE"
CREATE VERTEX Forum (PRIMARY_ID id UINT, title STRING, creationDate DATETIME) WITH primary_id_as_attribute="TRUE"
CREATE VERTEX Person (PRIMARY_ID id UINT, firstName STRING, lastName STRING, gender STRING, birthday DATETIME, creationDate DATETIME, locationIP STRING, browserUsed STRING, speaks set<STRING>, email set<STRING>) WITH primary_id_as_attribute="TRUE"
CREATE VERTEX Tag (PRIMARY_ID id UINT, name STRING, url STRING) WITH primary_id_as_attribute="TRUE"
CREATE VERTEX TagClass (PRIMARY_ID id UINT, name STRING, url STRING) WITH primary_id_as_attribute="TRUE"
CREATE DIRECTED EDGE CONTAINER_OF (FROM Forum, TO Post) WITH REVERSE_EDGE="CONTAINER_OF_REVERSE"
CREATE DIRECTED EDGE HAS_CREATOR (FROM Comment|Post, TO Person) WITH REVERSE_EDGE="HAS_CREATOR_REVERSE"
CREATE DIRECTED EDGE HAS_INTEREST (FROM Person, TO Tag) WITH REVERSE_EDGE="HAS_INTEREST_REVERSE"
CREATE DIRECTED EDGE HAS_MEMBER (FROM Forum, TO Person, joinDate DATETIME) WITH REVERSE_EDGE="HAS_MEMBER_REVERSE"
CREATE DIRECTED EDGE HAS_MODERATOR (FROM Forum, TO Person) WITH REVERSE_EDGE="HAS_MODERATOR_REVERSE"
CREATE DIRECTED EDGE HAS_TAG (FROM Comment|Post|Forum, TO Tag) WITH REVERSE_EDGE="HAS_TAG_REVERSE"
CREATE DIRECTED EDGE HAS_TYPE (FROM Tag, TO TagClass) WITH REVERSE_EDGE="HAS_TYPE_REVERSE"
CREATE DIRECTED EDGE IS_LOCATED_IN (FROM Comment, TO Country | FROM Post, TO Country | FROM Company, TO Country | FROM Person, TO City | FROM University, TO City) WITH REVERSE_EDGE="IS_LOCATED_IN_REVERSE"
CREATE DIRECTED EDGE IS_PART_OF (FROM City, TO Country | FROM Country, TO Continent) WITH REVERSE_EDGE="IS_PART_OF_REVERSE"
CREATE DIRECTED EDGE IS_SUBCLASS_OF (FROM TagClass, TO TagClass) WITH REVERSE_EDGE="IS_SUBCLASS_OF_REVERSE"
CREATE UNDIRECTED EDGE KNOWS (FROM Person, TO Person, creationDate DATETIME)
CREATE DIRECTED EDGE LIKES (FROM Person, TO Comment|Post, creationDate DATETIME) WITH REVERSE_EDGE="LIKES_REVERSE"
CREATE DIRECTED EDGE REPLY_OF (FROM Comment, TO Comment|Post) WITH REVERSE_EDGE="REPLY_OF_REVERSE"
CREATE DIRECTED EDGE STUDY_AT (FROM Person, TO University, classYear INT) WITH REVERSE_EDGE="STUDY_AT_REVERSE"
CREATE DIRECTED EDGE WORK_AT (FROM Person, TO Company, workFrom INT) WITH REVERSE_EDGE="WORK_AT_REVERSE"

# ======== Data Type Coverage ==================
USE GLOBAL
TYPEDEF TUPLE <i1 INT, s1 STRING, d1 DATETIME> TUP
TYPEDEF TUPLE <i1 UINT, f1 FLOAT, d1 DOUBLE> TUP2
TYPEDEF TUPLE <i1 UINT(4), s1 STRING(10)> TUP3

CREATE VERTEX tuplePerson (PRIMARY_ID id STRING, tup2 TUP2, tup3 TUP3) WITH primary_id_as_attribute="FALSE"
CREATE VERTEX fixedLenPerson (id STRING PRIMARY KEY, fb FIXED_BINARY(10)) WITH STATS="outdegree_by_edgetype"
CREATE VERTEX indexPerson (id STRING PRIMARY KEY, i1 UINT, i2 INT, dt DATETIME, str STRING)
CREATE VERTEX compositePerson (id UINT, name STRING, PRIMARY KEY (name, id))
CREATE VERTEX compositeForum (id UINT, title STRING, creationDate INT, PRIMARY KEY (id, title, creationDate))
CREATE DIRECTED EDGE HAS_MEMBER2 (FROM compositeForum, TO compositePerson, joinDate DATETIME) WITH REVERSE_EDGE="HAS_MEMBER_REVERSE2"
CREATE UNDIRECTED EDGE HAS_MEMBER3 (FROM Forum, TO compositePerson, joinDate DATETIME)

# variable length UTD not supported in attributes
CREATE VERTEX listV(id UINT PRIMARY KEY, creationDate DATETIME, intList LIST<INT>, dtList LIST<DATETIME>, sList LIST<STRING>, tupSet1 LIST<TUP2>, tupSet2 LIST<TUP3>)
CREATE VERTEX setV(id UINT PRIMARY KEY, id2 STRING, intSet SET<INT>, dtSet SET<DATETIME>, sSet SET<STRING>, tupSet1 SET<TUP2>, tupSet2 SET<TUP3>)
CREATE VERTEX mapV(id UINT PRIMARY KEY, map1 MAP<DATETIME,STRING>, map2 MAP<STRING,STRING>, map3 MAP<INT,TUP2>, map4 MAP<INT,TUP3>)
CREATE DIRECTED EDGE listE(FROM listV|setV|mapV, TO listV|setV|mapV, intList LIST<INT>, dtList LIST<DATETIME>, sList LIST<STRING>, tupSet1 LIST<TUP2>, tupSet2 LIST<TUP3>)
CREATE DIRECTED EDGE setE(FROM listV|setV|mapV, TO listV|setV|mapV, intSet SET<INT>, dtSet SET<DATETIME>, sSet SET<STRING>, tupSet1 SET<TUP2>, tupSet2 SET<TUP3>)
CREATE UNDIRECTED EDGE mapE(FROM listV|setV|mapV, TO listV|setV|mapV, map1 MAP<DATETIME,STRING>, map2 MAP<STRING,STRING>, map3 MAP<INT,TUP2>, map4 MAP<INT,TUP3>)

CREATE GLOBAL SCHEMA_CHANGE JOB addIndex {
  ALTER VERTEX Country ADD INDEX country_name ON (name);
  ALTER VERTEX Company ADD INDEX company_name ON (name);
  ALTER VERTEX University ADD INDEX university_name ON (name);
  ALTER VERTEX Tag ADD INDEX tag_name ON (name);
  ALTER VERTEX TagClass ADD INDEX tagclass_name ON (name);
  ALTER VERTEX indexPerson ADD INDEX uint_idx ON (i1);
  ALTER VERTEX indexPerson ADD INDEX int_idx ON (i2);
  ALTER VERTEX indexPerson ADD INDEX dt_idx ON (dt);
  ALTER VERTEX indexPerson ADD INDEX str_idx ON (str);
}

RUN GLOBAL SCHEMA_CHANGE JOB addIndex
CREATE GRAPH test_graph (*)