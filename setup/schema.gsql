DROP ALL
# == segment size = 2^9, Number of segment = 320 ==
set segsize_in_bits = 9
# ======== Original LDBC SNB v2 ==================
# Note: outdegree_by_edgetype is turned on for Comment and Person
CREATE VERTEX Comment (id UINT PRIMARY KEY, creationDate DATETIME, locationIP STRING, browserUsed STRING, content STRING, length UINT) WITH STATS="outdegree_by_edgetype"
CREATE VERTEX Post (id UINT PRIMARY KEY, imageFile STRING, creationDate DATETIME, locationIP STRING, browserUsed STRING, lang STRING, content STRING, length UINT)
CREATE VERTEX Company (id UINT PRIMARY KEY, name STRING, url STRING)
CREATE VERTEX University (id UINT PRIMARY KEY, name STRING, url STRING)
CREATE VERTEX City (id UINT PRIMARY KEY, name STRING, url STRING)
CREATE VERTEX Country (id UINT PRIMARY KEY, name STRING, url STRING)
CREATE VERTEX Continent (id UINT PRIMARY KEY, name STRING, url STRING)
CREATE VERTEX Forum (id UINT PRIMARY KEY, title STRING, creationDate DATETIME)
CREATE VERTEX Person (id UINT PRIMARY KEY, firstName STRING, lastName STRING, gender STRING, birthday DATETIME, creationDate DATETIME, locationIP STRING, browserUsed STRING, speaks set<STRING>, email set<STRING>) WITH STATS="outdegree_by_edgetype"
CREATE VERTEX Tag (id UINT PRIMARY KEY, name STRING, url STRING)
CREATE VERTEX TagClass (id UINT PRIMARY KEY, name STRING, url STRING)
CREATE DIRECTED EDGE CONTAINER_OF (FROM Forum, TO Post) WITH REVERSE_EDGE="CONTAINER_OF_REVERSE"
CREATE DIRECTED EDGE HAS_CREATOR (FROM Comment|Post, TO Person) WITH REVERSE_EDGE="HAS_CREATOR_REVERSE"
CREATE DIRECTED EDGE HAS_INTEREST (FROM Person, TO Tag) WITH REVERSE_EDGE="HAS_INTEREST_REVERSE"
CREATE DIRECTED EDGE HAS_MEMBER (FROM Forum, TO Person, joinDate DATETIME) WITH REVERSE_EDGE="HAS_MEMBER_REVERSE"
CREATE DIRECTED EDGE HAS_MODERATOR (FROM Forum, TO Person) WITH REVERSE_EDGE="HAS_MODERATOR_REVERSE"
CREATE DIRECTED EDGE HAS_TAG (FROM Comment|Post|Forum, TO Tag) WITH REVERSE_EDGE="HAS_TAG_REVERSE"
CREATE DIRECTED EDGE HAS_TYPE (FROM Tag, TO TagClass) WITH REVERSE_EDGE="HAS_TYPE_REVERSE"
CREATE DIRECTED EDGE IS_LOCATED_IN (FROM Comment, TO Country | FROM Post, TO Country | FROM Company, TO Country | FROM Person, TO City | FROM University, TO City) WITH REVERSE_EDGE="IS_LOCATED_IN_REVERSE"
CREATE DIRECTED EDGE IS_PART_OF (FROM City, TO Country | FROM Country, TO Continent) WITH REVERSE_EDGE="IS_PART_OF_REVERSE"
CREATE DIRECTED EDGE IS_SUBCLASS_OF (FROM TagClass, TO TagClass) WITH REVERSE_EDGE="IS_SUBCLASS_OF_REVERSE"
CREATE UNDIRECTED EDGE KNOWS (FROM Person, TO Person, creationDate DATETIME)
CREATE DIRECTED EDGE LIKES (FROM Person, TO Comment|Post, creationDate DATETIME) WITH REVERSE_EDGE="LIKES_REVERSE"
CREATE DIRECTED EDGE REPLY_OF (FROM Comment, TO Comment|Post) WITH REVERSE_EDGE="REPLY_OF_REVERSE"
CREATE DIRECTED EDGE STUDY_AT (FROM Person, TO University, classYear INT) WITH REVERSE_EDGE="STUDY_AT_REVERSE"
CREATE DIRECTED EDGE WORK_AT (FROM Person, TO Company, workFrom INT) WITH REVERSE_EDGE="WORK_AT_REVERSE"

CREATE GLOBAL SCHEMA_CHANGE JOB addIndex {
  ALTER VERTEX Country ADD INDEX country_name ON (name);
  ALTER VERTEX Company ADD INDEX company_name ON (name);
  ALTER VERTEX University ADD INDEX university_name ON (name);
  ALTER VERTEX Tag ADD INDEX tag_name ON (name);
  ALTER VERTEX TagClass ADD INDEX tagclass_name ON (name);
}
RUN GLOBAL SCHEMA_CHANGE JOB addIndex
CREATE GRAPH ldbc_snb (*)

# ======== Extended Data Type Coverage ==================
# Refer to https://docs.tigergraph.com/gsql-ref/current/ddl-and-loading/system-and-language-basics
USE GLOBAL
TYPEDEF TUPLE <i INT, d DOUBLE, dt DATETIME> TUP
TYPEDEF TUPLE <i UINT(8), i2 INT(8), s STRING(10)> TUP2

# These vertices and edges uses SF-0.1 LDBC SNB data 
CREATE VERTEX tupPerson (PRIMARY_ID id STRING, creationDate DATETIME, creationEpoch INT, tup TUP, tup2 TUP2) WITH primary_id_as_attribute="FALSE"
CREATE VERTEX compPerson (firstName STRING, lastName STRING, creationDate DATETIME, speaks set<STRING>, PRIMARY KEY (firstName, lastName, creationDate))
CREATE VERTEX compForum (id UINT, title STRING, creationDate DATETIME, PRIMARY KEY (id, title, creationDate))
CREATE DIRECTED EDGE TUP_MEMBER (FROM Forum, TO tupPerson, creationDate DATETIME, creationEpoch INT, tup TUP, tup2 TUP2)


CREATE VERTEX listV(id UINT PRIMARY KEY, intList LIST<INT>, dbList LIST<DOUBLE>, dtList LIST<DATETIME>, sList LIST<STRING>, tupList1 LIST<TUP>, tupList2 LIST<TUP2>, fb4 FIXED_BINARY(4))
CREATE VERTEX setV(id UINT PRIMARY KEY, intSet SET<INT>, dbSet SET<DOUBLE>, dtSet SET<DATETIME>, sSet SET<STRING>, tupSet1 SET<TUP>, tupSet2 SET<TUP2>)
CREATE VERTEX mapV(id UINT PRIMARY KEY, map1 MAP<DATETIME,STRING>, map2 MAP<STRING,STRING>, map3 MAP<INT,TUP>, map4 MAP<INT,TUP2>)

CREATE DIRECTED EDGE COMP_MEMBER (FROM compForum, TO compPerson, joinDate DATETIME)
CREATE DIRECTED EDGE listE(FROM listV, TO listV, intList LIST<INT>, dbList LIST<DOUBLE>, dtList LIST<DATETIME>, sList LIST<STRING>, tupSet1 LIST<TUP>, tupSet2 LIST<TUP2>, fb4 FIXED_BINARY(4))
CREATE DIRECTED EDGE setE(FROM setV, TO setV, intSet SET<INT>, dbSet SET<DOUBLE>, dtSet SET<DATETIME>, sSet SET<STRING>, tupSet1 SET<TUP>, tupSet2 SET<TUP2>)
CREATE UNDIRECTED EDGE mapE(FROM mapV, TO mapV, map1 MAP<DATETIME,STRING>, map2 MAP<STRING,STRING>, map3 MAP<INT,TUP>, map4 MAP<INT,TUP2>)
CREATE GRAPH test_graph (*)